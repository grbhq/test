# This is a basic workflow to help you get started with Actions

name: 备份docker镜像到GHCR仓库

# Controls when the action will run. 
on:
  # tag送到指定分支中会触发构建
  #push:
     #branches:
      #- 'dockerfile'  # 选择推送tag标签则自动触发运行的分支
      # - 'develop'
    # Sequence of patterns matched against refs/tags
     #tags:
      #- 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
# 定时调度
  #schedule:
    # 参考 https://jasonet.co/posts/scheduled-actions/
    # note: 这里是GMT时间，北京时间减去八小时即可。如北京时间 22:30 => GMT 14:30
    #- cron: '00 14 * * *' # GMT 14:00 => 北京时间 22:00
    #- cron: '30 16 * * *' # GMT 16:30（前一天） => 北京时间 00:30
# 点击star时触发运行
  #watch:
    #types: started
  # Allows you to run this workflow manually from the Actions tab

# 可以手动触发
  workflow_dispatch:
    inputs:
      logLevel:
        description: 'Log level'   
        required: true
        default: 'warning'
      pushghcr:
        description: '镜像是否推送到GHCR仓库，不勾选不推送，默认启用'
        type: boolean
        required: true
        default: 'true'
      input_version:
        description: '输入需要需要备份的tag标签名 (多个值请使用英文逗号隔开 如：go-1.20.1, go-1.20.2)'
        required: true

jobs:
  convert:
      runs-on: ubuntu-latest
      outputs:
        output_matrix: ${{ steps.set_data.outputs.output_matrix }}

      steps:
        - name: Set up data
          id: set_data
          run: |
            input="${{ github.event.inputs.input_values }}"
            output=($(echo "$input" | sed -E 's/\s*,\s*/,/g' | sed -E 's/\s+//g' | sed -E 's/(^,)|(,$)//g' | grep -o '[^,]*'))
            formatted_output="[\"$(echo "${output[@]}" | sed 's/ /","/g')\"]"
            echo "output_matrix=$formatted_output" >> $GITHUB_OUTPUT
  buildx:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ${{ fromJson(needs.convert.outputs.output_matrix) }} # 传入需要备份的go镜像版本号
        #version: [go-1.20.1, go-1.20.2, go-1.20.3, go-1.20.4, go-1.20.5, go-1.20.6, go-1.19.0] #指定go版本
      fail-fast: false  # 矩阵工作流运行状态互不影响
    
    # 这里用于定义 GITHUB_TOKEN 的权限
    permissions:
       packages: write
       contents: read
    
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      - 
        name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: image Name change
        id: read-docker-image-identifiers   # 去secrets中添加DOCKER_IMAGENAME 镜像名称，自动字母大写转换小写。
        run: |
          echo DOCKER_IMAGENAME=$(echo ${{ secrets.DOCKER_IMAGENAME }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV
      -
        name: Extract metadata (tags, labels) for Docker
        if: ${{ github.event.inputs.pushghcr == 'true' || ! github.event.inputs.logLevel }}
        id: meta   # 处理并输出镜像tag版本号[docker/metadata-action@master]
        uses: docker/metadata-action@v4
        with:
          images: |
            name=ghcr.io/${{ github.repository_owner }}/${{ env.DOCKER_IMAGENAME }},enable=${{ github.event.inputs.pushghcr == 'true' || ! github.event.inputs.logLevel }}
          tags: |
            type=raw,value=${{ matrix.version }},priority=1000
      -
        name: create Dockerfile
        run: |
          echo "FROM techknowlogick/xgo:${{ matrix.version }}" > ./Dockerfile
          cat ./Dockerfile
      -
        name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .	# 工作目录
          file: ./Dockerfile
          platforms: linux/amd64
          #platforms可选架构: linux/amd64,linux/amd64/v2,linux/amd64/v3,linux/amd64/v4,linux/arm64,linux/riscv64,linux/ppc64le,linux/s390x,linux/386,linux/mips64le,linux/mips64,linux/arm/v7,linux/arm/v6
# 镜像推送
          push: ${{ github.event.inputs.pushghcr == 'true' || ! github.event.inputs.logLevel }}
# 给清单打上多个tags标签  
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
